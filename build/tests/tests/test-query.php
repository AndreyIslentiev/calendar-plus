<?php

/**
 * Class Calendar_Plus_Query_Tests
 * @group query
 */
class Calendar_Plus_Query_Tests extends Calendar_Plus_UnitTestCase {

	public function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub

		set_current_screen( 'front' );
		$this->set_permalink_structure( '/%postname%/' );
	}

	public function test_events_page() {
		$page_id                    = $this->factory->post->create( array( 'post_type' => 'page' ) );
		$settings                   = calendarp_get_settings();
		$settings['events_page_id'] = $page_id;
		calendarp_update_settings( $settings );

		delete_option( 'rewrite_rules' );
		flush_rewrite_rules();

		$page = get_post( $page_id );
		$this->go_to( home_url( "/$page->post_name/" ) );
		$this->assertTrue( is_post_type_archive( 'calendar_event' ) );
	}

	/**
	 * @depends test_events_page
	 */
	public function test_events_page_order() {
		$page_id                    = $this->factory->post->create( array( 'post_type' => 'page' ) );
		$settings                   = calendarp_get_settings();
		$settings['events_page_id'] = $page_id;
		calendarp_update_settings( $settings );

		delete_option( 'rewrite_rules' );
		flush_rewrite_rules();

		$today = current_time( 'timestamp' );

		// Event 1
		$event1 = $this->_generate_event( date( 'Y-m-d', $today - 432000 ), date( 'Y-m-d', $today - 432000 ) ); // - 5 days

		// Event 2
		$event2 = $this->_generate_event( date( 'Y-m-d', $today - 1296000 ), date( 'Y-m-d', $today - 1296000 ) ); // - 15 days

		// Event 3
		$event3 = $this->_generate_event( date( 'Y-m-d', $today + 432000 ), date( 'Y-m-d', $today + 432000 ) ); // + 5 days

		// The most simple query: List events since today onwards
		$page = get_post( $page_id );
		$this->go_to( home_url( "/$page->post_name/" ) );
		$wp_query = $GLOBALS['wp_query'];
		$posts = $wp_query->get_posts();
		$this->assertCount( 1, $posts );
		$this->assertEquals( $event3->ID, $posts[0]->ID );


		// List from 16 days ago
		$_REQUEST['from'] = date( 'Y-m-d', $today - 1900800 );
		$wp_query = $GLOBALS['wp_query'];
		$wp_query->set( 'from', $_REQUEST['from'] );
		$posts = $wp_query->get_posts();
		$this->assertCount( 3, $posts );
		$this->assertEquals( $event2->ID, $posts[0]->ID );
		$this->assertEquals( $event1->ID, $posts[1]->ID );
		$this->assertEquals( $event3->ID, $posts[2]->ID );

		// List from 6 days ago to 6 days from today
		$_REQUEST['from'] = date( 'Y-m-d', $today - 518400 );
		$_REQUEST['to'] = date( 'Y-m-d', $today + 518400 );
		$wp_query = $GLOBALS['wp_query'];
		$wp_query->set( 'from', $_REQUEST['from'] );
		$wp_query->set( 'to', $_REQUEST['to'] );
		$posts = $wp_query->get_posts();
		$this->assertCount( 2, $posts );
		$this->assertEquals( $event1->ID, $posts[0]->ID );
		$this->assertEquals( $event3->ID, $posts[1]->ID );

		
//		global $wpdb;
//		var_dump($wpdb->get_results( "SELECT * FROM $wpdb->calendarp_calendar" ) );
	}

	private function _generate_event( $from_date, $to_date, $from_time = '09:00', $to_time = '12:15' ) {
		$rules = array(
			array(
				'rule_type' => 'standard',
				'from_time' => $from_time,
				'until_time' => $to_time,
				'from_date' => $from_date,
				'until_date' => $to_date
			)
		);

		$post_id = $this->factory->post->create( array( 'post_type' => 'calendar_event' ) );
		$event = calendarp_get_event( $post_id );
		calendarp_generate_event_rules_and_dates( $post_id, $rules );

		return $event;
	}

	/**
	 * @ticket 476008
	 * https://secure.helpscout.net/conversation/233843778/476008/?folderId=177380
	 *
	 * Tests the correct order of the events
	 */
	function test_476008() {
		$page_id = $this->factory->post->create( array( 'post_type' => 'page' ) );
		$settings = calendarp_get_settings();
		$settings['events_page_id'] = $page_id;
		calendarp_update_settings( $settings );

		delete_option( 'rewrite_rules' );
		flush_rewrite_rules();
		set_current_screen( 'front' );
		$this->set_permalink_structure( '/%postname%/' );

		$today = current_time( 'timestamp' );


		// Event 1
		$args = $this->factory->post->generate_args();
		$args['post_type'] = 'calendar_event';
		$post_id = $this->factory->post->create_object( $args );
		$event1 = calendarp_get_event( $post_id );

		$rules = array(
			array(
				'rule_type' => 'standard',
				'from_date' => date( 'Y-m-d', $today + 432000 ), // Today + 5 days
				'until_date' => date( 'Y-m-d', $today + 432000 ), // Today + 5 days
				'from_time' => '12:00',
				'until_time' => '15:15'
			),
			array(
				'rule_type' => 'standard',
				'from_date' => date( 'Y-m-d', $today + 1296000 ), // Today + 15 days
				'until_date' => date( 'Y-m-d', $today + 1296000 ), // Today + 15 days,
				'from_time' => '09:00',
				'until_time' => '12:15'
			)
		);

		calendarp_generate_event_rules_and_dates( $event1->ID, $rules );

		// Event 2
		$args = $this->factory->post->generate_args();
		$args['post_type'] = 'calendar_event';
		$post_id = $this->factory->post->create_object( $args );
		$event2 = calendarp_get_event( $post_id );

		$rules = array(
			array(
				'rule_type' => 'standard',
				'from_date' => date( 'Y-m-d', $today + 864000 ), // Today + 10 days,
				'until_date' => date( 'Y-m-d', $today + 864000 ),
				'from_time' => '11:30',
				'until_time' => '17:00'
			)
		);

		calendarp_generate_event_rules_and_dates( $event2->ID, $rules );

		$page = get_post( $page_id );
		$this->go_to( "/$page->post_name/" );
	}
}